name: Deploy Backend to Azure Container App

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/azure-container-app-backend.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/azure-container-app-backend.yml'
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: cerregistry2025
  CONTAINER_NAME: cer-backend
  RESOURCE_GROUP: rg-cer-prod
  IMAGE_NAME: cer-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Database Migrations
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Check if database secrets are available
          if [ -z "${{ secrets.DB_HOST }}" ] || [ -z "${{ secrets.DB_USER }}" ] || [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "⚠️  Database secrets not configured. Skipping migrations."
            echo "To enable automatic migrations, add these secrets to your GitHub repository:"
            echo "- DB_HOST: Your database server hostname"
            echo "- DB_PORT: Your database port (usually 1433 for SQL Server)"
            echo "- DB_NAME: Your database name"
            echo "- DB_USER: Your database username"
            echo "- DB_PASSWORD: Your database password"
            echo ""
            echo "You can add secrets at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 0
          fi
          
          echo "✅ Database secrets found. Running migrations..."
          
          # Get the Container App Environment
          ENVIRONMENT_NAME=$(az containerapp show \
            --name ${{ env.CONTAINER_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.environmentId" \
            --output tsv | cut -d'/' -f9)
          
          # Run migrations using a one-time job
          JOB_NAME="migration-job-$(echo ${{ github.sha }} | cut -c1-8)"
          
          az containerapp job create \
            --name $JOB_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment $ENVIRONMENT_NAME \
            --trigger-type Manual \
            --replica-timeout 300 \
            --replica-retry-limit 1 \
            --parallelism 1 \
            --replica-completion-count 1 \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --secrets \
              "db-host=${{ secrets.DB_HOST }}" \
              "db-port=${{ secrets.DB_PORT || '1433' }}" \
              "db-name=${{ secrets.DB_NAME }}" \
              "db-user=${{ secrets.DB_USER }}" \
              "db-password=${{ secrets.DB_PASSWORD }}" \
            --env-vars \
              "DB_HOST=secretref:db-host" \
              "DB_PORT=secretref:db-port" \
              "DB_NAME=secretref:db-name" \
              "DB_USER=secretref:db-user" \
              "DB_PASSWORD=secretref:db-password" \
              "NODE_ENV=production" \
            --command "/bin/sh" \
            --args "-c,npm run db:migrate"
          
          # Start the migration job and wait for completion
          az containerapp job start \
            --name $JOB_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }}
          
          # Wait for job completion (max 5 minutes)
          timeout=300
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            status=$(az containerapp job execution list \
              --name $JOB_NAME \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query "[0].properties.status" \
              --output tsv 2>/dev/null || echo "NotFound")
            
            if [ "$status" = "Succeeded" ]; then
              echo "✅ Migration job completed successfully"
              break
            elif [ "$status" = "Failed" ]; then
              echo "❌ Migration job failed"
              az containerapp job execution list \
                --name $JOB_NAME \
                --resource-group ${{ env.RESOURCE_GROUP }}
              exit 1
            fi
            
            echo "⏳ Waiting for migration job to complete... (${elapsed}s)"
            sleep 10
            elapsed=$((elapsed + 10))
          done
          
          # Clean up migration job
          az containerapp job delete \
            --name $JOB_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes || true

    - name: Deploy to Azure Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az containerapp update \
            --name ${{ env.CONTAINER_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --min-replicas 0 \
            --max-replicas 2 \
            --cpu 0.25 \
            --memory 0.5Gi

    - name: Logout from Azure
      run: az logout
